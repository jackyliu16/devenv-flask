{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q的提交，表示引入了破坏性 API 变更（这和语义化版本中的 MAJOR 相对应）。 破坏性变更可以是任意 类型 提交的一部分。 除 fix: 和 feat: 之外，也可以使用其它提交 类型 ，例如 @commitlint/config-conventional（基于 Angular 约定）中推荐的 build:、chore:、 ci:、docs:、style:、refactor:、perf:、test:，等等。 脚注中除了 BREAKING CHANGE:  ，其它条目应该采用类似 git trailer format 这样的惯例。\\E$"}
{"rule":"WHITESPACE_RULE","sentence":"^\\Q的提交，表示引入了破坏性 API 变更（这和语义化版本中的 MAJOR 相对应）。 破坏性变更可以是任意 类型 提交的一部分。 除 fix: 和 feat: 之外，也可以使用其它提交 类型 ，例如 @commitlint/config-conventional（基于 Angular 约定）中推荐的 build:、chore:、 ci:、docs:、style:、refactor:、perf:、test:，等等。 脚注中除了 BREAKING CHANGE:  ，其它条目应该采用类似 git trailer format 这样的惯例。\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Qfix: 在代码库中修复了一个 bug（这和语义化版本中的 \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q 相对应）\nfeat: 在代码库中新增了一个功能（这和语义化版本中的 \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q 相对应）\nBREAKING CHANGE 在范围之后添加的 \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q 提醒注意破坏性提交\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q本文中的关键词“必须（MUST）”、“禁止（MUST NOT）”、“必要（REQUIRED）”、“应当（SHALL）”、“不应当（SHALL NOT）”、“应该（SHOULD）”、“不应该（SHOULD NOT）”、“推荐（RECOMMENDED）”、“可以（MAY）”和“可选（OPTIONAL）” ，其相关解释参考 RFC 2119。 每个提交都必须使用类型字段前缀，它由一个名词构成，诸如 feat 或 fix，其后接可选的范围字段，可选的 !，以及必要的冒号（英文半角）和空格。 当一个提交为应用或类库实现了新功能时，必须使用 feat 类型。 当一个提交为应用修复了 bug 时，必须使用 fix 类型。 范围字段可以跟随在类型字段后面。范围必须是一个描述某部分代码的名词，并用圆括号包围，例如：fix(parser): 描述字段必须直接跟在 <类型>(范围) 前缀的冒号和空格之后。描述指的是对代码变更的简短总结，例如：fix: array parsing issue when multiple spaces were contained in string。 在简短描述之后，可以编写较长的提交正文，为代码变更提供额外的上下文信息。正文必须起始于描述字段结束的一个空行后。 提交的正文内容自由编写，并可以使用空行分隔不同段落。 在正文结束的一个空行之后，可以编写一行或多行脚注。每行脚注都必须包含 一个令牌（token），后面紧跟 : 或 # 作为分隔符，后面再紧跟令牌的值（受 git trailer convention 启发）。 脚注的令牌必须使用 - 作为连字符，比如 Acked-by (这样有助于 区分脚注和多行正文)。有一种例外情况就是 BREAKING CHANGE，它可以被认为是一个令牌。 脚注的值可以包含空格和换行，值的解析过程必须直到下一个脚注的令牌/分隔符出现为止。 破坏性变更必须在提交信息中标记出来，要么在 <类型>(范围) 前缀中标记，要么作为脚注的一项。 包含在脚注中时，破坏性变更必须包含大写的文本 BREAKING CHANGE，后面紧跟着冒号、空格，然后是描述，例如：BREAKING CHANGE: environment variables now take precedence over config files。 包含在 <类型>(范围) 前缀时，破坏性变更必须通过把 !\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q本文中的关键词“必须（MUST）”、“禁止（MUST NOT）”、“必要（REQUIRED）”、“应当（SHALL）”、“不应当（SHALL NOT）”、“应该（SHOULD）”、“不应该（SHOULD NOT）”、“推荐（RECOMMENDED）”、“可以（MAY）”和“可选（OPTIONAL）” ，其相关解释参考 RFC 2119。 每个提交都必须使用类型字段前缀，它由一个名词构成，诸如 feat 或 fix，其后接可选的范围字段，可选的 !，以及必要的冒号（英文半角）和空格。 当一个提交为应用或类库实现了新功能时，必须使用 feat 类型。 当一个提交为应用修复了 bug 时，必须使用 fix 类型。 范围字段可以跟随在类型字段后面。范围必须是一个描述某部分代码的名词，并用圆括号包围，例如：fix(parser): 描述字段必须直接跟在 <类型>(范围) 前缀的冒号和空格之后。描述指的是对代码变更的简短总结，例如：fix: array parsing issue when multiple spaces were contained in string。 在简短描述之后，可以编写较长的提交正文，为代码变更提供额外的上下文信息。正文必须起始于描述字段结束的一个空行后。 提交的正文内容自由编写，并可以使用空行分隔不同段落。 在正文结束的一个空行之后，可以编写一行或多行脚注。每行脚注都必须包含 一个令牌（token），后面紧跟 \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q 或 \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q# 作为分隔符，后面再紧跟令牌的值（受 git trailer convention 启发）。 脚注的令牌必须使用 - 作为连字符，比如 Acked-by (这样有助于 区分脚注和多行正文)。有一种例外情况就是 BREAKING CHANGE，它可以被认为是一个令牌。 脚注的值可以包含空格和换行，值的解析过程必须直到下一个脚注的令牌/分隔符出现为止。 破坏性变更必须在提交信息中标记出来，要么在 <类型>(范围) 前缀中标记，要么作为脚注的一项。 包含在脚注中时，破坏性变更必须包含大写的文本 BREAKING CHANGE，后面紧跟着冒号、空格，然后是描述，例如：BREAKING CHANGE: environment variables now take precedence over config files。 包含在 <类型>(范围) 前缀时，破坏性变更必须通过把 !\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q直接放在 : 前面标记出来。如果使用了 !，那么脚注中可以不写 BREAKING CHANGE:，同时提交信息的描述中应该用来描述破坏性变更。 在提交说明中，可以使用 feat 和 fix 之外的类型，比如：docs: updated ref docs.\\E$"}
